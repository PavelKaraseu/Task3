<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Task3Shapes</name>
    </assembly>
    <members>
        <member name="T:Task3Shapes.Circle">
            <summary> Class describing a circle. </summary>
            <seealso cref="T:Task3Shapes.Shape" />
        </member>
        <member name="P:Task3Shapes.Circle.Radius">
            <summary> Gets the radius. </summary>
            <value> The radius of the circle. </value>
        </member>
        <member name="M:Task3Shapes.Circle.#ctor(System.Double)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.Circle"/> class. </summary>
            <remarks> 
            When entering very large values for radius ​​when calculating the area or perimeter, a situation is possible 
            with obtaining the result in the form of double.Infinity
            </remarks>
            <param name="radius"> The radius of the circle. </param>
            <exception cref="T:System.ArgumentException"> The radius of the circle can not be equal zero or be less than zero. </exception>
        </member>
        <member name="M:Task3Shapes.Circle.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <remarks>
            When checking the possibility of cutting, the figure is superimposed on the original 
            and is in a static state. 
            </remarks>
            <param name="shape"> Desired shape. </param>
            <exception cref="T:System.Exception">
            You can not cut such a circle. Try with a smaller circle.
            or
            You can not cut such a rectangle. Try with a smaller rectangle.
            or
            You can not cut such a square. Try with a smaller square.
            or
            You can not cut such a trapezium. Try with a smaller trapezium.
            or
            You can not cut such a triangle. Try with a smaller triangle.
            </exception>
        </member>
        <member name="M:Task3Shapes.Circle.GetArea">
            <summary> Сircle area calculation. </summary>
            <returns> The circle area. </returns>
        </member>
        <member name="M:Task3Shapes.Circle.GetPerimeter">
            <summary> Сircle perimeter calculation. </summary>
            <returns> The circle perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Circle.WriteToXml(System.Xml.XmlWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Circle.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Circle.ToString">
            <summary> Represents a shape as a string. Overriden method. </summary>
            <returns> A <see cref="T:System.String"/> that represents this instance. Return shape as string. </returns>
        </member>
        <member name="M:Task3Shapes.Circle.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance. Overriden method. </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with this instance. </param>
            <returns>
                <c> true </c> If the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c> false </c>. 
            </returns>
        </member>
        <member name="M:Task3Shapes.Circle.GetHashCode">
            <summary> Hash code for this instance. Overridden method. </summary>
            <returns> 
            New algorithm hashCode = hashCode * hash + (variable hash code (Radius))
            </returns>
        </member>
        <member name="T:Task3Shapes.Rectangle">
            <summary> Class describing a rectangle. </summary>
            <seealso cref="T:Task3Shapes.Shape" />
        </member>
        <member name="P:Task3Shapes.Rectangle.Length">
            <summary> Gets the length. </summary>
            <value> The length of the rectangle. </value>
        </member>
        <member name="P:Task3Shapes.Rectangle.Width">
            <summary> Gets the width. </summary>
            <value> The width of the rectangle. </value>
        </member>
        <member name="M:Task3Shapes.Rectangle.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.Rectangle"/> class. </summary>
            <remarks> 
            When entering very large values for length or/and width ​​when calculating the area or perimeter, a situation is possible 
            with obtaining the result in the form of double.Infinity
            </remarks>
            <param name="length"> The length of the rectangle. </param>
            <param name="width"> The width of the rectangle. </param>
            <exception cref="T:System.ArgumentException">
            The length and width of the rectangle can not be equal and lenght should be more than width.
            or
            The length or width of the rectangle can not be equal zero or be less than zero.
            </exception>
        </member>
        <member name="M:Task3Shapes.Rectangle.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <remarks> 
            When checking the possibility of cutting, the figure is superimposed on the original 
            and is in a static state. 
            </remarks>
            <param name="shape"> Desired shape. </param>
            <exception cref="T:System.Exception">
            You can not cut such a circle. Try with a smaller circle.
            or
            You can not cut such a rectangle. Try with a smaller rectangle.
            or
            You can not cut such a square. Try with a smaller square.
            or
            You can not cut such a trapezium. Try with a smaller trapezium.
            or
            You can not cut such a triangle. Try with a smaller triangle.
            </exception>
        </member>
        <member name="M:Task3Shapes.Rectangle.GetArea">
            <summary> Rectangle area calculation. </summary>
            <returns> The rectangle area. </returns>
        </member>
        <member name="M:Task3Shapes.Rectangle.GetPerimeter">
            <summary> Rectangle perimeter calculation. </summary>
            <returns> The rectangle perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Rectangle.GetCircleRadius">
            <summary> Calculation of the radius of the circumscribed circle of the rectangle. </summary>
            <returns> Radius of the circumscribed circle of the rectangle. </returns>
        </member>
        <member name="M:Task3Shapes.Rectangle.WriteToXml(System.Xml.XmlWriter)">
            <summary>  Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Rectangle.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Rectangle.ToString">
            <summary> Represents a shape as a string. Overriden method. </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance. Return shape as string. </returns>
        </member>
        <member name="M:Task3Shapes.Rectangle.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance. Overriden method. </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with this instance. </param>
            <returns>
                <c> true </c> If the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c> false </c>. 
            </returns>
        </member>
        <member name="M:Task3Shapes.Rectangle.GetHashCode">
            <summary> Hash code for this instance. Overridden method. </summary>
            <returns> 
            New algorithm hashCode = hashCode * hash + (variable hash code (Length, Width))
            </returns>
        </member>
        <member name="T:Task3Shapes.Shape">
            <summary> An abstract class for describing the shape of a figure. </summary>
        </member>
        <member name="M:Task3Shapes.Shape.GetArea">
            <summary> Gets the area. </summary>
            <returns> Area of some shape. </returns>
        </member>
        <member name="M:Task3Shapes.Shape.GetPerimeter">
            <summary> Gets the perimeter. </summary>
            <returns> Perimeter of some shape. </returns>
        </member>
        <member name="M:Task3Shapes.Shape.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <returns> True, if possible, false if not. </returns>
        </member>
        <member name="M:Task3Shapes.Shape.WriteToXml(System.Xml.XmlWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Shape.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="T:Task3Shapes.ShapeException">
            <summary> Custom exception class for shapes. </summary>
        </member>
        <member name="T:Task3Shapes.ShapeException.CutException">
            <summary> An exception that occurs when cutting a figure. </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Task3Shapes.ShapeException.CutException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.ShapeException.CutException"/> class. </summary>
            <param name="message"> The message that describes the error. </param>
        </member>
        <member name="T:Task3Shapes.Square">
            <summary> Class describing a square. </summary>
            <seealso cref="T:Task3Shapes.Shape" />
        </member>
        <member name="P:Task3Shapes.Square.Side">
            <summary> Gets the side. </summary>
            <value> The side of the square. </value>
        </member>
        <member name="M:Task3Shapes.Square.#ctor(System.Double)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.Square"/> class. </summary>
            <remarks> 
            When entering very large values for side ​​when calculating the area or perimeter, a situation is possible 
            with obtaining the result in the form of double.Infinity
            </remarks>
            <param name="side"> The side of the square. </param>
            <exception cref="T:System.ArgumentException"> The side of the square can not be equal zero or be less than zero. </exception>
        </member>
        <member name="M:Task3Shapes.Square.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <param name="shape"> Desired shape. </param>
            <exception cref="T:System.Exception">
            You can not cut such a circle. Try with a smaller circle.
            or
            You can not cut such a rectangle. Try with a smaller rectangle.
            or
            You can not cut such a square. Try with a smaller square.
            or
            You can not cut such a trapezium. Try with a smaller trapezium.
            or
            You can not cut such a triangle. Try with a smaller triangle.
            </exception>
        </member>
        <member name="M:Task3Shapes.Square.GetArea">
            <summary> Square area calculation. </summary>
            <returns> The square area. </returns>
        </member>
        <member name="M:Task3Shapes.Square.GetPerimeter">
            <summary> Square perimeter calculation. </summary>
            <returns> The square perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Square.GetCircleRadius">
            <summary> Calculation of the radius of the circumscribed circle of the square. </summary>
            <returns> Radius of the circumscribed circle of the square. </returns>
        </member>
        <member name="M:Task3Shapes.Square.WriteToXml(System.Xml.XmlWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Square.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Square.ToString">
            <summary> Represents a shape as a string. Overriden method. </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance. Return shape as string. </returns>
        </member>
        <member name="M:Task3Shapes.Square.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance. Overriden method. </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with this instance. </param>
            <returns>
                <c> true </c> If the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c> false </c>. 
            </returns>
        </member>
        <member name="M:Task3Shapes.Square.GetHashCode">
            <summary> Hash code for this instance. Overridden method. </summary>
            <returns> 
            New algorithm hashCode = hashCode * hash + (variable hash code (Side))
            </returns>
        </member>
        <member name="T:Task3Shapes.Trapezium">
            <summary> Class describing a isosceles trapezium. </summary>
            <seealso cref="T:Task3Shapes.Shape" />
        </member>
        <member name="P:Task3Shapes.Trapezium.BaseA">
            <summary> Gets the base A. </summary>
            <value> The base A of the trapezium. </value>
        </member>
        <member name="P:Task3Shapes.Trapezium.BaseB">
            <summary> Gets the base B. </summary>
            <value> The base B of the trapezium. </value>
        </member>
        <member name="P:Task3Shapes.Trapezium.Side">
            <summary> Gets the side. </summary>
            <value> The side of the trapezium. </value>
        </member>
        <member name="P:Task3Shapes.Trapezium.Height">
            <summary> Gets the height. </summary>
            <value> The height of the trapezium. </value>
        </member>
        <member name="P:Task3Shapes.Trapezium.AngleA">
            <summary> Gets the angle A. </summary>
            <value> The angle A of the trapezium. </value>
        </member>
        <member name="M:Task3Shapes.Trapezium.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.Trapezium"/> class. </summary>
            <remarks> 
            When entering very large values for base A or/and base B or/and height ​​when calculating the area or perimeter, 
            a situation is possible with obtaining the result in the form of double.Infinity
            </remarks>
            <param name="baseA"> The base A of the trapezium.</param>
            <param name="baseB"> The base B of the trapezium.</param>
            <param name="height"> The height of the trapezium.</param>
            <exception cref="T:System.ArgumentException"> The baseA or baseB or height of the trapezium can not be equal zero or be less than zero.
            or
            The base A should be more than base B. </exception>
        </member>
        <member name="M:Task3Shapes.Trapezium.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <remarks>
            When checking the possibility of cutting, the figure is superimposed on the original 
            and is in a static state. 
            </remarks>
            <param name="shape"> Desired shape. </param>
            <exception cref="T:System.Exception">
            You can not cut such a circle. Try with a smaller circle.
            or
            You can not cut such a rectangle. Try with a smaller rectangle.
            or
            You can not cut such a square. Try with a smaller rectangle.
            or
            You can not cut such a trapezium. Try with a smaller trapezium.
            or
            You can not cut such a triangle. Try with a smaller triangle.
            </exception>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetArea">
            <summary> Trapezium area calculation. </summary>
            <returns> The trapezium area. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetPerimeter">
            <summary> Trapezium perimeter calculation. </summary>
            <returns> The trapezium perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetDiagonale">
            <summary> Trapezium diagonale calculation. </summary>
            <returns> The trapezium diagonale. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetHalfPerimeterTriangle">
            <summary> Trapezium half perimeter calculation. </summary>
            <returns> The trapezium half perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetCircleRadius">
            <summary> Calculation of the radius of the circumscribed circle of the trapezium. </summary>
            <returns> Radius of the circumscribed circle of the trapezium. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.WriteToXml(System.Xml.XmlWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Trapezium.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Trapezium.ToString">
            <summary> Represents a shape as a string. Overriden method. </summary>
            <returns> A <see cref="T:System.String"/> that represents this instance. Return shape as string. </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance. Overriden method. </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with this instance. </param>
            <returns>
                <c> true </c> If the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c> false </c>. 
            </returns>
        </member>
        <member name="M:Task3Shapes.Trapezium.GetHashCode">
            <summary> Hash code for this instance. Overridden method. </summary>
            <returns> 
            New algorithm hashCode = hashCode * hash + (variable hash code (BaseA, BaseB, Heigth))
            </returns>
        </member>
        <member name="T:Task3Shapes.Triangle">
            <summary> Class describing an equilateral triangle. </summary>
            <seealso cref="T:Task3Shapes.Shape" />
        </member>
        <member name="P:Task3Shapes.Triangle.SideA">
            <summary> Gets the side A. </summary>
            <value> The side A of the triangle. </value>
        </member>
        <member name="P:Task3Shapes.Triangle.SideB">
            <summary> Gets the side B. </summary>
            <value> The side B of the triangle. </value>
        </member>
        <member name="P:Task3Shapes.Triangle.SideC">
            <summary> Gets the side C. </summary>
            <value> The side C of the triangle. </value>
        </member>
        <member name="P:Task3Shapes.Triangle.Height">
            <summary> Gets the height. </summary>
            <value> The height of the triangle. </value>
        </member>
        <member name="F:Task3Shapes.Triangle.circleRadius">
            <summary> Radius of a circle inscribed in a triangle. </summary>
        </member>
        <member name="M:Task3Shapes.Triangle.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the <see cref="T:Task3Shapes.Triangle"/> class. </summary>
            <remarks> 
            When entering very large values for side A or/and side B or/and side C ​​when calculating the area or perimeter, 
            a situation is possible with obtaining the result in the form of double.Infinity
            </remarks>
            <param name="sideA"> The side A of the triangle. </param>
            <param name="sideB"> The side B of the triangle. </param>
            <param name="sideC"> The side C of the triangle. </param>
            <exception cref="T:System.ArgumentException"> The side A, side B, side C of the triangle can not be equal zero or be less than zero, also
            equilateral triangle sides should be equal. </exception>
        </member>
        <member name="M:Task3Shapes.Triangle.CutCheck(Task3Shapes.Shape)">
            <summary> Checking whether it is possible to cut the desired shape from the current shape. </summary>
            <remarks>
            When checking the possibility of cutting, the figure is superimposed on the original 
            and is in a static state. 
            </remarks>
            <param name="shape"> Desired shape. </param>
            <exception cref="T:System.Exception">
            You can not cut such a circle. Try with a smaller circle.
            or
            You can not cut such a rectangle. Try with a smaller rectangle.
            or
            You can not cut such a square. Try with a smaller square.
            or
            You can not cut such a trapezium. Try with a smaller trapezium.
            or
            You can not cut such a triangle. Try with a smaller triangle.
            </exception>
        </member>
        <member name="M:Task3Shapes.Triangle.GetArea">
            <summary> Triangle area calculation. </summary>
            <returns> The triangle area. </returns>
        </member>
        <member name="M:Task3Shapes.Triangle.GetPerimeter">
            <summary> Triangle perimeter calculation. </summary>
            <returns> The triangle perimeter. </returns>
        </member>
        <member name="M:Task3Shapes.Triangle.GetCircleRadius">
            <summary> Calculation of the radius of the circumscribed circle of the triangle. </summary>
            <returns> Radius of the circumscribed circle of the triangle. </returns>
        </member>
        <member name="M:Task3Shapes.Triangle.WriteToXml(System.Xml.XmlWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="xmlWriter"> The XmlWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Triangle.WriteToXml(System.IO.StreamWriter)">
            <summary> Writes shape to xml file. </summary>
            <param name="streamWriter"> The streamWriter instance. </param>
        </member>
        <member name="M:Task3Shapes.Triangle.ToString">
            <summary> Represents a shape as a string. Overriden method. </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance. Return shape as string. </returns>
        </member>
        <member name="M:Task3Shapes.Triangle.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance. Overriden method. </summary>
            <param name="obj"> The <see cref="T:System.Object"/> to compare with this instance. </param>
            <returns>
                <c> true </c> If the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c> false </c>. 
            </returns>
        </member>
        <member name="M:Task3Shapes.Triangle.GetHashCode">
            <summary> Hash code for this instance. Overridden method. </summary>
            <returns> 
            New algorithm hashCode = hashCode * hash + (variable hash code (Side A * 3))
            </returns>
        </member>
    </members>
</doc>
